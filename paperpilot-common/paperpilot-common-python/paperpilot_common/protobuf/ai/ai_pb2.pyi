"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _FinishReason:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _FinishReasonEnumTypeWrapper(
    google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_FinishReason.ValueType], builtins.type
):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    NULL: _FinishReason.ValueType  # 0
    """未结束"""
    STOP: _FinishReason.ValueType  # 1
    """生成结束"""
    LENGTH: _FinishReason.ValueType  # 2
    """生成长度达到最大值"""
    FUNCTION_CALL: _FinishReason.ValueType  # 3
    """需要调用函数"""
    CONTENT_FILTER: _FinishReason.ValueType  # 4
    """生成内容被过滤"""
    MESSAGE_NUM_LIMIT: _FinishReason.ValueType  # 5
    """Chat 次数用完"""
    MESSAGE_TOO_LONG: _FinishReason.ValueType  # 6
    """Message 过长"""

class FinishReason(_FinishReason, metaclass=_FinishReasonEnumTypeWrapper):
    """OpenAI FinishReason"""

NULL: FinishReason.ValueType  # 0
"""未结束"""
STOP: FinishReason.ValueType  # 1
"""生成结束"""
LENGTH: FinishReason.ValueType  # 2
"""生成长度达到最大值"""
FUNCTION_CALL: FinishReason.ValueType  # 3
"""需要调用函数"""
CONTENT_FILTER: FinishReason.ValueType  # 4
"""生成内容被过滤"""
MESSAGE_NUM_LIMIT: FinishReason.ValueType  # 5
"""Chat 次数用完"""
MESSAGE_TOO_LONG: FinishReason.ValueType  # 6
"""Message 过长"""
global___FinishReason = FinishReason

@typing_extensions.final
class GptResult(google.protobuf.message.Message):
    """GPT 响应"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONTENT_FIELD_NUMBER: builtins.int
    FINISH_REASON_FIELD_NUMBER: builtins.int
    CHAT_ID_FIELD_NUMBER: builtins.int
    TOTAL_CHAT_TIMES_FIELD_NUMBER: builtins.int
    REMAIN_CHAT_TIMES_FIELD_NUMBER: builtins.int
    content: builtins.str
    """生成内容"""
    finish_reason: global___FinishReason.ValueType
    """结束原因"""
    chat_id: builtins.str
    """聊天 ID"""
    total_chat_times: builtins.int
    """总可用聊天次数"""
    remain_chat_times: builtins.int
    """剩余可用聊天次数"""
    def __init__(
        self,
        *,
        content: builtins.str = ...,
        finish_reason: global___FinishReason.ValueType | None = ...,
        chat_id: builtins.str | None = ...,
        total_chat_times: builtins.int | None = ...,
        remain_chat_times: builtins.int | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "_chat_id",
            b"_chat_id",
            "_finish_reason",
            b"_finish_reason",
            "_remain_chat_times",
            b"_remain_chat_times",
            "_total_chat_times",
            b"_total_chat_times",
            "chat_id",
            b"chat_id",
            "finish_reason",
            b"finish_reason",
            "remain_chat_times",
            b"remain_chat_times",
            "total_chat_times",
            b"total_chat_times",
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "_chat_id",
            b"_chat_id",
            "_finish_reason",
            b"_finish_reason",
            "_remain_chat_times",
            b"_remain_chat_times",
            "_total_chat_times",
            b"_total_chat_times",
            "chat_id",
            b"chat_id",
            "content",
            b"content",
            "finish_reason",
            b"finish_reason",
            "remain_chat_times",
            b"remain_chat_times",
            "total_chat_times",
            b"total_chat_times",
        ],
    ) -> None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_chat_id", b"_chat_id"]
    ) -> typing_extensions.Literal["chat_id"] | None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_finish_reason", b"_finish_reason"]
    ) -> typing_extensions.Literal["finish_reason"] | None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_remain_chat_times", b"_remain_chat_times"]
    ) -> typing_extensions.Literal["remain_chat_times"] | None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_total_chat_times", b"_total_chat_times"]
    ) -> typing_extensions.Literal["total_chat_times"] | None: ...

global___GptResult = GptResult

@typing_extensions.final
class GptRequest(google.protobuf.message.Message):
    """GPT 请求"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TEXT_FIELD_NUMBER: builtins.int
    ACTION_FIELD_NUMBER: builtins.int
    CHAT_ID_FIELD_NUMBER: builtins.int
    text: builtins.str
    """所选文本"""
    action: builtins.str
    """操作"""
    chat_id: builtins.str
    """对话 ID（为空则开启新对话）"""
    def __init__(
        self,
        *,
        text: builtins.str | None = ...,
        action: builtins.str = ...,
        chat_id: builtins.str | None = ...,
    ) -> None: ...
    def HasField(
        self,
        field_name: typing_extensions.Literal[
            "_chat_id", b"_chat_id", "_text", b"_text", "chat_id", b"chat_id", "text", b"text"
        ],
    ) -> builtins.bool: ...
    def ClearField(
        self,
        field_name: typing_extensions.Literal[
            "_chat_id", b"_chat_id", "_text", b"_text", "action", b"action", "chat_id", b"chat_id", "text", b"text"
        ],
    ) -> None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_chat_id", b"_chat_id"]
    ) -> typing_extensions.Literal["chat_id"] | None: ...
    @typing.overload
    def WhichOneof(
        self, oneof_group: typing_extensions.Literal["_text", b"_text"]
    ) -> typing_extensions.Literal["text"] | None: ...

global___GptRequest = GptRequest
