"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import grpc
import grpc.aio
import paperpilot_common.protobuf.ai.ai_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class GptServiceStub:
    """GPT 服务"""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Ask: grpc.UnaryStreamMultiCallable[
        paperpilot_common.protobuf.ai.ai_pb2.GptRequest,
        paperpilot_common.protobuf.ai.ai_pb2.GptResult,
    ]
    """询问 GPT"""

class GptServiceAsyncStub:
    """GPT 服务"""

    Ask: grpc.aio.UnaryStreamMultiCallable[
        paperpilot_common.protobuf.ai.ai_pb2.GptRequest,
        paperpilot_common.protobuf.ai.ai_pb2.GptResult,
    ]
    """询问 GPT"""

class GptServiceServicer(metaclass=abc.ABCMeta):
    """GPT 服务"""

    @abc.abstractmethod
    def Ask(
        self,
        request: paperpilot_common.protobuf.ai.ai_pb2.GptRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        collections.abc.Iterator[paperpilot_common.protobuf.ai.ai_pb2.GptResult],
        collections.abc.AsyncIterator[paperpilot_common.protobuf.ai.ai_pb2.GptResult],
    ]:
        """询问 GPT"""

def add_GptServiceServicer_to_server(
    servicer: GptServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]
) -> None: ...
