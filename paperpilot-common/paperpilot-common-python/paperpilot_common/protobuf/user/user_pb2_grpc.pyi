"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import google.protobuf.empty_pb2
import grpc
import grpc.aio
import paperpilot_common.protobuf.user.user_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class UserServiceStub:
    """用户服务接口"""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetUserInfo: grpc.UnaryUnaryMultiCallable[
        paperpilot_common.protobuf.user.user_pb2.UserId,
        paperpilot_common.protobuf.user.user_pb2.UserInfo,
    ]
    """获取指定ID用户简要信息"""
    GetUserDetail: grpc.UnaryUnaryMultiCallable[
        paperpilot_common.protobuf.user.user_pb2.UserId,
        paperpilot_common.protobuf.user.user_pb2.UserDetail,
    ]
    """获取指定ID用户详细信息"""
    ListUserInfo: grpc.UnaryUnaryMultiCallable[
        paperpilot_common.protobuf.user.user_pb2.UserIdList,
        paperpilot_common.protobuf.user.user_pb2.UserInfoList,
    ]
    """批量获取用户简要信息"""
    UpdateUserAvatar: grpc.UnaryUnaryMultiCallable[
        paperpilot_common.protobuf.user.user_pb2.UpdateUserAvatarRequest,
        paperpilot_common.protobuf.user.user_pb2.UserDetail,
    ]
    """更新用户头像"""

class UserServiceAsyncStub:
    """用户服务接口"""

    GetUserInfo: grpc.aio.UnaryUnaryMultiCallable[
        paperpilot_common.protobuf.user.user_pb2.UserId,
        paperpilot_common.protobuf.user.user_pb2.UserInfo,
    ]
    """获取指定ID用户简要信息"""
    GetUserDetail: grpc.aio.UnaryUnaryMultiCallable[
        paperpilot_common.protobuf.user.user_pb2.UserId,
        paperpilot_common.protobuf.user.user_pb2.UserDetail,
    ]
    """获取指定ID用户详细信息"""
    ListUserInfo: grpc.aio.UnaryUnaryMultiCallable[
        paperpilot_common.protobuf.user.user_pb2.UserIdList,
        paperpilot_common.protobuf.user.user_pb2.UserInfoList,
    ]
    """批量获取用户简要信息"""
    UpdateUserAvatar: grpc.aio.UnaryUnaryMultiCallable[
        paperpilot_common.protobuf.user.user_pb2.UpdateUserAvatarRequest,
        paperpilot_common.protobuf.user.user_pb2.UserDetail,
    ]
    """更新用户头像"""

class UserServiceServicer(metaclass=abc.ABCMeta):
    """用户服务接口"""

    @abc.abstractmethod
    def GetUserInfo(
        self,
        request: paperpilot_common.protobuf.user.user_pb2.UserId,
        context: _ServicerContext,
    ) -> typing.Union[
        paperpilot_common.protobuf.user.user_pb2.UserInfo,
        collections.abc.Awaitable[paperpilot_common.protobuf.user.user_pb2.UserInfo],
    ]:
        """获取指定ID用户简要信息"""
    @abc.abstractmethod
    def GetUserDetail(
        self,
        request: paperpilot_common.protobuf.user.user_pb2.UserId,
        context: _ServicerContext,
    ) -> typing.Union[
        paperpilot_common.protobuf.user.user_pb2.UserDetail,
        collections.abc.Awaitable[paperpilot_common.protobuf.user.user_pb2.UserDetail],
    ]:
        """获取指定ID用户详细信息"""
    @abc.abstractmethod
    def ListUserInfo(
        self,
        request: paperpilot_common.protobuf.user.user_pb2.UserIdList,
        context: _ServicerContext,
    ) -> typing.Union[
        paperpilot_common.protobuf.user.user_pb2.UserInfoList,
        collections.abc.Awaitable[paperpilot_common.protobuf.user.user_pb2.UserInfoList],
    ]:
        """批量获取用户简要信息"""
    @abc.abstractmethod
    def UpdateUserAvatar(
        self,
        request: paperpilot_common.protobuf.user.user_pb2.UpdateUserAvatarRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        paperpilot_common.protobuf.user.user_pb2.UserDetail,
        collections.abc.Awaitable[paperpilot_common.protobuf.user.user_pb2.UserDetail],
    ]:
        """更新用户头像"""

def add_UserServiceServicer_to_server(
    servicer: UserServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]
) -> None: ...

class UserPublicServiceStub:
    """用户公开接口"""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetUserInfo: grpc.UnaryUnaryMultiCallable[
        paperpilot_common.protobuf.user.user_pb2.UserId,
        paperpilot_common.protobuf.user.user_pb2.UserInfo,
    ]
    """获取指定ID用户简要信息"""
    GetCurrentUser: grpc.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        paperpilot_common.protobuf.user.user_pb2.UserDetail,
    ]
    """获取当前用户信息"""
    UpdateUser: grpc.UnaryUnaryMultiCallable[
        paperpilot_common.protobuf.user.user_pb2.UpdateUserRequest,
        paperpilot_common.protobuf.user.user_pb2.UserDetail,
    ]
    """更新用户信息"""
    UploadUserAvatar: grpc.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        paperpilot_common.protobuf.user.user_pb2.UploadUserAvatarResponse,
    ]
    """上传用户头像"""

class UserPublicServiceAsyncStub:
    """用户公开接口"""

    GetUserInfo: grpc.aio.UnaryUnaryMultiCallable[
        paperpilot_common.protobuf.user.user_pb2.UserId,
        paperpilot_common.protobuf.user.user_pb2.UserInfo,
    ]
    """获取指定ID用户简要信息"""
    GetCurrentUser: grpc.aio.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        paperpilot_common.protobuf.user.user_pb2.UserDetail,
    ]
    """获取当前用户信息"""
    UpdateUser: grpc.aio.UnaryUnaryMultiCallable[
        paperpilot_common.protobuf.user.user_pb2.UpdateUserRequest,
        paperpilot_common.protobuf.user.user_pb2.UserDetail,
    ]
    """更新用户信息"""
    UploadUserAvatar: grpc.aio.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        paperpilot_common.protobuf.user.user_pb2.UploadUserAvatarResponse,
    ]
    """上传用户头像"""

class UserPublicServiceServicer(metaclass=abc.ABCMeta):
    """用户公开接口"""

    @abc.abstractmethod
    def GetUserInfo(
        self,
        request: paperpilot_common.protobuf.user.user_pb2.UserId,
        context: _ServicerContext,
    ) -> typing.Union[
        paperpilot_common.protobuf.user.user_pb2.UserInfo,
        collections.abc.Awaitable[paperpilot_common.protobuf.user.user_pb2.UserInfo],
    ]:
        """获取指定ID用户简要信息"""
    @abc.abstractmethod
    def GetCurrentUser(
        self,
        request: google.protobuf.empty_pb2.Empty,
        context: _ServicerContext,
    ) -> typing.Union[
        paperpilot_common.protobuf.user.user_pb2.UserDetail,
        collections.abc.Awaitable[paperpilot_common.protobuf.user.user_pb2.UserDetail],
    ]:
        """获取当前用户信息"""
    @abc.abstractmethod
    def UpdateUser(
        self,
        request: paperpilot_common.protobuf.user.user_pb2.UpdateUserRequest,
        context: _ServicerContext,
    ) -> typing.Union[
        paperpilot_common.protobuf.user.user_pb2.UserDetail,
        collections.abc.Awaitable[paperpilot_common.protobuf.user.user_pb2.UserDetail],
    ]:
        """更新用户信息"""
    @abc.abstractmethod
    def UploadUserAvatar(
        self,
        request: google.protobuf.empty_pb2.Empty,
        context: _ServicerContext,
    ) -> typing.Union[
        paperpilot_common.protobuf.user.user_pb2.UploadUserAvatarResponse,
        collections.abc.Awaitable[paperpilot_common.protobuf.user.user_pb2.UploadUserAvatarResponse],
    ]:
        """上传用户头像"""

def add_UserPublicServiceServicer_to_server(
    servicer: UserPublicServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]
) -> None: ...
