"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import google.protobuf.empty_pb2
import grpc
import grpc.aio
import paperpilot_common.protobuf.monitor.client_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class MonitorClientServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetStatus: grpc.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        paperpilot_common.protobuf.monitor.client_pb2.ClientStatus,
    ]

class MonitorClientServiceAsyncStub:
    GetStatus: grpc.aio.UnaryUnaryMultiCallable[
        google.protobuf.empty_pb2.Empty,
        paperpilot_common.protobuf.monitor.client_pb2.ClientStatus,
    ]

class MonitorClientServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GetStatus(
        self,
        request: google.protobuf.empty_pb2.Empty,
        context: _ServicerContext,
    ) -> typing.Union[
        paperpilot_common.protobuf.monitor.client_pb2.ClientStatus,
        collections.abc.Awaitable[paperpilot_common.protobuf.monitor.client_pb2.ClientStatus],
    ]: ...

def add_MonitorClientServiceServicer_to_server(
    servicer: MonitorClientServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]
) -> None: ...
